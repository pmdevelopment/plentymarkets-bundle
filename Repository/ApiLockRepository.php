<?php

namespace PM\PlentyMarketsBundle\Repository;

use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\Query\Parameter;
use Doctrine\Persistence\ManagerRegistry;
use PM\PlentyMarketsBundle\Component\Interfaces\ApiLockRepositoryInterface;
use PM\PlentyMarketsBundle\Entity\ApiLock;

/**
 * ApiLockRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ApiLockRepository extends ServiceEntityRepository implements ApiLockRepositoryInterface
{

    /**
     * ApiLockRepository constructor.
     */
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, ApiLock::class);
    }

    /**
     * Create QueryBuild for active
     *
     * @param string $alias
     *
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function createQueryBuilderForActive($alias = 'api_lock')
    {
        $builder = $this->createQueryBuilder($alias);
        $builder
            ->where(sprintf('%s.deleted = 0', $alias))
            ->andWhere(sprintf('%s.validFrom < :now', $alias))
            ->andWhere(
                $builder->expr()->orX(
                    $builder->expr()->isNull(sprintf('%s.validUntil', $alias)),
                    $builder->expr()->gt(sprintf('%s.validUntil', $alias), ':now')
                )
            )
            ->setParameters(
                new ArrayCollection(
                    [
                        new Parameter('now', date('Y-m-d H:i:s')),
                    ]
                )
            )
            ->orderBy(sprintf('%s.validUntil', $alias), 'desc');

        return $builder;
    }

    /**
     * Has active lock
     *
     * @param string $api
     *
     * @return bool
     */
    public function hasActive($api)
    {
        if (null === $this->getActive($api)) {
            return false;
        }

        return true;
    }

    /**
     * Get Active
     *
     * @param string $api
     *
     * @return null|ApiLock
     */
    public function getActive($api)
    {
        $builder = $this->createQueryBuilderForActive('api_lock');

        if (null !== $api) {
            $builder
                ->andWhere('api_lock.api = :api')
                ->setParameter('api', $api);
        }

        $result = $builder->getQuery()->getResult();
        if (0 < count($result)) {
            return $result[0];
        }

        return null;
    }

    /**
     * Find Active
     *
     * @return array|ApiLock[]
     */
    public function findActive()
    {
        $builder = $this->createQueryBuilderForActive();

        return $builder->getQuery()->getResult();
    }
}
